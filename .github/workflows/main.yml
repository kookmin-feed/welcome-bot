name: Deploy Welcome Bot

on:
  push:
    branches: [develop, main]
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "develop"
        type: string
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: ubuntu-latest

    # OIDC 권한 설정
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            # Manual workflow dispatch
            ENV="${{ github.event.inputs.environment }}"
            BRANCH="${{ github.event.inputs.branch }}"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # Push to main branch
            ENV="prod"
            BRANCH="main"
          else
            # Push to develop branch or other
            ENV="dev"
            BRANCH="develop"
          fi

          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "Environment: $ENV, Branch: $BRANCH"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.env.outputs.environment == 'prod' && secrets.AWS_ROLE_ARN_PROD || secrets.AWS_ROLE_ARN_DEV }}
          role-session-name: GitHubActions-DeployWelcomeBot-${{ steps.env.outputs.environment }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy via SSM Run Command
        id: deploy
        run: |
          ENV="${{ steps.env.outputs.environment }}"
          BRANCH="${{ steps.env.outputs.branch }}"

          # Set environment-specific variables
          if [ "$ENV" = "prod" ]; then
            INSTANCE_ID="${{ secrets.EC2_INSTANCE_ID_PROD }}"
            DOCUMENT_NAME="KookminFeed-DeployApplication-prod"
          else
            INSTANCE_ID="${{ secrets.EC2_INSTANCE_ID_DEV }}"
            DOCUMENT_NAME="KookminFeed-DeployApplication-dev"
          fi

          echo "Deploying welcome-bot to $ENV environment (branch: $BRANCH)..."
          echo "Instance ID: $INSTANCE_ID"
          echo "Document: $DOCUMENT_NAME"

          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "$DOCUMENT_NAME" \
            --parameters "service=welcome-bot,branch=$BRANCH" \
            --query 'Command.CommandId' \
            --output text)

          echo "Command ID: $COMMAND_ID"
          echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

          # Wait for command completion
          echo "Waiting for deployment to complete..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID"

      - name: Get deployment result
        run: |
          COMMAND_ID="${{ steps.deploy.outputs.command_id }}"
          INSTANCE_ID="${{ steps.deploy.outputs.instance_id }}"

          echo "Getting deployment result..."
          RESULT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'Status' \
            --output text)

          echo "Deployment status: $RESULT"

          if [ "$RESULT" = "Success" ]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed!"
            # Get error details
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --query 'StandardErrorContent' \
              --output text
            exit 1
          fi

      - name: Get deployment logs
        if: always()
        run: |
          COMMAND_ID="${{ steps.deploy.outputs.command_id }}"
          INSTANCE_ID="${{ steps.deploy.outputs.instance_id }}"

          echo "=== Deployment Logs ==="
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'StandardOutputContent' \
            --output text
