name: Deploy Welcome Bot

on:
  push:
    branches: [develop, main]
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "develop"
        type: string

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: ubuntu-latest

    # OIDC 권한 설정
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.branch }}" == "main" ]]; then
            echo "ENV_SUFFIX=PROD" >> $GITHUB_ENV
          else
            echo "ENV_SUFFIX=DEV" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets[format('AWS_ROLE_ARN_{0}', env.ENV_SUFFIX)] }}
          role-session-name: GitHubActions-DeployWelcomeBot
          aws-region: ${{ env.AWS_REGION }}

      - name: Create environment file
        run: |
          # .env 파일 생성
          cat > .env <<EOF
          TOKEN=${{ secrets[format('TOKEN_{0}', env.ENV_SUFFIX)] }}
          WELCOME_CHANNEL_ID=${{ secrets[format('WELCOME_CHANNEL_ID_{0}', env.ENV_SUFFIX)] }}
          EOF

      - name: Deploy via SSM Run Command
        id: deploy
        run: |
          # 브랜치 결정 로직
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            BRANCH="main"
          elif [[ "${{ github.event.inputs.branch }}" != "" ]]; then
            BRANCH="${{ github.event.inputs.branch }}"
          else
            BRANCH="develop"
          fi

          # .env 파일을 base64로 인코딩
          ENV_CONTENT=$(base64 -w 0 .env)

          echo "Deploying welcome-bot (branch: $BRANCH) to EC2..."

          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets[format('EC2_INSTANCE_ID_{0}', env.ENV_SUFFIX)] }}" \
            --document-name "KookminFeed-DeployApplication" \
            --parameters "service=welcome-bot,branch=$BRANCH,envContent=$ENV_CONTENT" \
            --query 'Command.CommandId' \
            --output text)

          echo "Command ID: $COMMAND_ID"
          echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT

          # Wait for command completion
          echo "Waiting for deployment to complete..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets[format('EC2_INSTANCE_ID_{0}', env.ENV_SUFFIX)] }}"

      - name: Get deployment result
        run: |
          COMMAND_ID="${{ steps.deploy.outputs.command_id }}"

          echo "Getting deployment result..."
          RESULT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets[format('EC2_INSTANCE_ID_{0}', env.ENV_SUFFIX)] }}" \
            --query 'Status' \
            --output text)

          echo "Deployment status: $RESULT"

          if [ "$RESULT" = "Success" ]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed!"
            # Get error details
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ secrets[format('EC2_INSTANCE_ID_{0}', env.ENV_SUFFIX)] }}" \
              --query 'StandardErrorContent' \
              --output text
            exit 1
          fi

      - name: Get deployment logs
        if: always()
        run: |
          COMMAND_ID="${{ steps.deploy.outputs.command_id }}"

          echo "=== Deployment Logs ==="
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets[format('EC2_INSTANCE_ID_{0}', env.ENV_SUFFIX)] }}" \
            --query 'StandardOutputContent' \
            --output text
